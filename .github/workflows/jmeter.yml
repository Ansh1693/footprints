name: Run JMeter Test

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]
  workflow_dispatch:

jobs:
  jmeter-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Postgres
        run: |
          docker pull postgres
          docker run --name postgres-container -d \
          -e POSTGRES_DB=footprints \
          -e POSTGRES_PASSWORD=12345678 \
          -e POSTGRES_USER=postgres \
          -p 6500:5432 postgres

      - name: Run Server
        working-directory: ./postgre-server
        run: |
          npm install
          npx prisma generate
          npx prisma db push
          npm run start > server.log 2>&1 &
          sleep 10
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          BLACKLISTEDUSERNAMES: ${{ secrets.BLACKLISTEDUSERNAMES }}
          LOGTAIL_TOKEN: ${{ secrets.LOGTAIL_TOKEN }}
          RESEND_TOKEN: ${{ secrets.RESEND_TOKEN }}
          GOOGLE_ID: ${{ secrets.GOOGLE_ID }}
          GOOGLE_SECRET: ${{ secrets.GOOGLE_SECRET }}
          CLOUDFARE_ID: ${{ secrets.CLOUDFARE_ID }}
          CLOUDFARE_SECRET: ${{ secrets.CLOUDFARE_SECRET }}
          CLOUDFARE_URI: ${{ secrets.CLOUDFARE_URI }}
          CLOUDFARE_CDN: ${{ secrets.CLOUDFARE_CDN }}
          CLOUDFARE_BUCKET: ${{ secrets.CLOUDFARE_BUCKET }}
          HOST: ${{ secrets.HOST }}
          CLIENT: ${{ secrets.CLIENT }}
          STATIC_AUTH: ${{ secrets.STATIC_AUTH }}
          JWT_AUTH: ${{ secrets.JWT_AUTH }}
          REDDIT_REDIRECT_URI: ${{ secrets.REDDIT_REDIRECT_URI }}
          REDDIT_HOST: ${{ secrets.REDDIT_HOST }}
          REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
          REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}

      - name: Check occupied ports
        run: |
          echo "Checking for open ports on the system..."
          sudo netstat -tuln

          # OR use ss for a more modern approach:
          # sudo ss -tuln

          # Optionally, check which services are listening on which ports
          echo "Checking active processes on ports..."
          sudo lsof -i -P -n

          # You can also check for specific ports (for example, port 3000)
          echo "Checking for service listening on port 3000..."
          sudo lsof -i :3000

          # Output the host details
          echo "Host Information:"
          hostname -I
          hostname
          uname -a

          # Display the container's IP address in GitHub Actions
          ip a

          # Show the listening state of services
          echo "Checking listening services..."
          sudo lsof -i -sTCP:LISTEN

      - name: Run JMeter Action on a test
        uses: rbhadti94/apache-jmeter-action@v0.5.0
        with:
          testFilePath: tests/Load.jmx
          outputReportsFolder: reports/
          args: "--loglevel INFO"

      - name: Run JMeter Action on a second test
        uses: rbhadti94/apache-jmeter-action@v0.5.0
        with:
          testFilePath: tests/Load1.jmx
          outputReportsFolder: report/
          args: "--loglevel INFO"

      - name: Upload JMeter Results
        uses: actions/upload-artifact@v3
        with:
          name: jmeter-results
          path: reports/

      - name: Upload JMeter Results
        uses: actions/upload-artifact@v3
        with:
          name: jmeter-results
          path: report/

      - name: Upload Server Logs
        uses: actions/upload-artifact@v3
        with:
          name: server-logs
          path: ./postgre-server/app.log
      - name: Stop Postgres
        run: |
          docker stop postgres-container

      - name: Cleanup Postgres
        run: |
          docker rm postgres-container

      - name: Cleanup Server
        run: |
          rm -rf node_modules
