generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:12345678@localhost:6500/footprints?schema=public"
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  name          String
  description   String?
  username      String          @unique @db.VarChar(255)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  UserMetadata  UserMetadata?
  UserAuth      UserAuth?
  Document      Document[]
  Comments      Comments[]
  Tags          Tag[]
  Blok          Blok[]
  BlokFollowers BlokFollowers[]
}

model UserMetadata {
  id            String   @id @default(cuid())
  userId        String   @unique
  User          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  profileImage  String?
  profileBanner String?
  verified      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model UserAuth {
  id         String      @id @default(cuid())
  userId     String      @unique
  User       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  GoogleAuth GoogleAuth?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  RedditAuth RedditAuth?
}

model GoogleAuth {
  id           String   @id @default(cuid())
  userAuthId   String   @unique
  UserAuth     UserAuth @relation(fields: [userAuthId], references: [id], onDelete: Cascade)
  accessToken  String?
  refreshToken String?
  googleId     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model RedditAuth {
  id             String   @id @default(cuid())
  userAuthId     String   @unique
  UserAuth       UserAuth @relation(fields: [userAuthId], references: [id], onDelete: Cascade)
  accessToken    String?
  refreshToken   String?
  redditId       String
  redditUsername String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Document {
  id               String            @id @default(cuid())
  userId           String
  User             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  heading          String?
  body             String?
  public           Boolean           @default(false)
  deleted          Boolean           @default(false)
  pinned           Boolean           @default(false)
  comment          Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  Comments         Comments[]
  DocumentMetadata DocumentMetadata?
  RedditData       RedditData?
  PinterestData    PinterestData?
  TagsDocument     TagsDocument[]
  BloksDocument    BloksDocument[]
}

model DocumentMetadata {
  id           String   @id @default(cuid())
  documentId   String   @unique
  Document     Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentType String
  url          Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model RedditData {
  id         String   @id @default(cuid())
  username   String
  postId     String   @unique
  documentId String   @unique
  Document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
}

model PinterestData {
  id         String   @id @default(cuid())
  username   String?
  postId     String?
  documentId String   @unique
  Document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
}

model Comments {
  id         String   @id @default(cuid())
  userId     String
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentId String
  Document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  body       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Tag {
  id           String         @id @default(cuid())
  tagName      String
  userId       String
  User         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  TagsDocument TagsDocument[]
}

model TagsDocument {
  tagId      String
  Tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  documentId String
  Document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([tagId, documentId])
}

model Blok {
  id            String          @id @default(cuid())
  userId        String
  User          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  blokName      String
  description   String?
  public        Boolean         @default(false)
  deleted       Boolean         @default(false)
  BloksDocument BloksDocument[]
  BlokMetadata  BlokMetadata?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  BlokFollowers BlokFollowers[]
}

model BloksDocument {
  blokId     String
  Blok       Blok     @relation(fields: [blokId], references: [id])
  documentId String
  Document   Document @relation(fields: [documentId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([blokId, documentId])
}

model BlokMetadata {
  id         String   @id @default(cuid())
  blokHeader String?
  blokId     String   @unique
  Blok       Blok     @relation(fields: [blokId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model BlokFollowers {
  blokId    String
  Blok      Blok     @relation(fields: [blokId], references: [id], onDelete: Cascade)
  userId    String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([blokId, userId])
}
